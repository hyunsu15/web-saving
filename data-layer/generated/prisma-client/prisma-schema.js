module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Admin {
  ID: ID!
  name: String!
  password: String!
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal!]
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  ID: ID
  name: String!
  password: String!
  deals: DealCreateManyWithoutAdminInput
}

input AdminCreateOneWithoutDealsInput {
  create: AdminCreateWithoutDealsInput
  connect: AdminWhereUniqueInput
}

input AdminCreateWithoutDealsInput {
  ID: ID
  name: String!
  password: String!
}

type AdminEdge {
  node: Admin!
  cursor: String!
}

enum AdminOrderByInput {
  ID_ASC
  ID_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type AdminPreviousValues {
  ID: ID!
  name: String!
  password: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
  AND: [AdminSubscriptionWhereInput!]
  OR: [AdminSubscriptionWhereInput!]
  NOT: [AdminSubscriptionWhereInput!]
}

input AdminUpdateInput {
  name: String
  password: String
  deals: DealUpdateManyWithoutAdminInput
}

input AdminUpdateManyMutationInput {
  name: String
  password: String
}

input AdminUpdateOneRequiredWithoutDealsInput {
  create: AdminCreateWithoutDealsInput
  update: AdminUpdateWithoutDealsDataInput
  upsert: AdminUpsertWithoutDealsInput
  connect: AdminWhereUniqueInput
}

input AdminUpdateWithoutDealsDataInput {
  name: String
  password: String
}

input AdminUpsertWithoutDealsInput {
  update: AdminUpdateWithoutDealsDataInput!
  create: AdminCreateWithoutDealsInput!
}

input AdminWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  deals_every: DealWhereInput
  deals_some: DealWhereInput
  deals_none: DealWhereInput
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input AdminWhereUniqueInput {
  ID: ID
}

type AggregateAdmin {
  count: Int!
}

type AggregateDeal {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Deal {
  ID: ID!
  createdAt: DateTime!
  admin: Admin!
  address: String!
  productName: String!
  productNum: String!
  productCost: Int!
  userName: String!
  userPhonNumber: String!
  isDeliver: Boolean!
  isAllPay: Boolean!
  payPerson: String
}

type DealConnection {
  pageInfo: PageInfo!
  edges: [DealEdge]!
  aggregate: AggregateDeal!
}

input DealCreateInput {
  ID: ID
  admin: AdminCreateOneWithoutDealsInput!
  address: String!
  productName: String!
  productNum: String!
  productCost: Int!
  userName: String!
  userPhonNumber: String!
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

input DealCreateManyWithoutAdminInput {
  create: [DealCreateWithoutAdminInput!]
  connect: [DealWhereUniqueInput!]
}

input DealCreateWithoutAdminInput {
  ID: ID
  address: String!
  productName: String!
  productNum: String!
  productCost: Int!
  userName: String!
  userPhonNumber: String!
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

type DealEdge {
  node: Deal!
  cursor: String!
}

enum DealOrderByInput {
  ID_ASC
  ID_DESC
  createdAt_ASC
  createdAt_DESC
  address_ASC
  address_DESC
  productName_ASC
  productName_DESC
  productNum_ASC
  productNum_DESC
  productCost_ASC
  productCost_DESC
  userName_ASC
  userName_DESC
  userPhonNumber_ASC
  userPhonNumber_DESC
  isDeliver_ASC
  isDeliver_DESC
  isAllPay_ASC
  isAllPay_DESC
  payPerson_ASC
  payPerson_DESC
}

type DealPreviousValues {
  ID: ID!
  createdAt: DateTime!
  address: String!
  productName: String!
  productNum: String!
  productCost: Int!
  userName: String!
  userPhonNumber: String!
  isDeliver: Boolean!
  isAllPay: Boolean!
  payPerson: String
}

input DealScalarWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  productNum: String
  productNum_not: String
  productNum_in: [String!]
  productNum_not_in: [String!]
  productNum_lt: String
  productNum_lte: String
  productNum_gt: String
  productNum_gte: String
  productNum_contains: String
  productNum_not_contains: String
  productNum_starts_with: String
  productNum_not_starts_with: String
  productNum_ends_with: String
  productNum_not_ends_with: String
  productCost: Int
  productCost_not: Int
  productCost_in: [Int!]
  productCost_not_in: [Int!]
  productCost_lt: Int
  productCost_lte: Int
  productCost_gt: Int
  productCost_gte: Int
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  userPhonNumber: String
  userPhonNumber_not: String
  userPhonNumber_in: [String!]
  userPhonNumber_not_in: [String!]
  userPhonNumber_lt: String
  userPhonNumber_lte: String
  userPhonNumber_gt: String
  userPhonNumber_gte: String
  userPhonNumber_contains: String
  userPhonNumber_not_contains: String
  userPhonNumber_starts_with: String
  userPhonNumber_not_starts_with: String
  userPhonNumber_ends_with: String
  userPhonNumber_not_ends_with: String
  isDeliver: Boolean
  isDeliver_not: Boolean
  isAllPay: Boolean
  isAllPay_not: Boolean
  payPerson: String
  payPerson_not: String
  payPerson_in: [String!]
  payPerson_not_in: [String!]
  payPerson_lt: String
  payPerson_lte: String
  payPerson_gt: String
  payPerson_gte: String
  payPerson_contains: String
  payPerson_not_contains: String
  payPerson_starts_with: String
  payPerson_not_starts_with: String
  payPerson_ends_with: String
  payPerson_not_ends_with: String
  AND: [DealScalarWhereInput!]
  OR: [DealScalarWhereInput!]
  NOT: [DealScalarWhereInput!]
}

type DealSubscriptionPayload {
  mutation: MutationType!
  node: Deal
  updatedFields: [String!]
  previousValues: DealPreviousValues
}

input DealSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DealWhereInput
  AND: [DealSubscriptionWhereInput!]
  OR: [DealSubscriptionWhereInput!]
  NOT: [DealSubscriptionWhereInput!]
}

input DealUpdateInput {
  admin: AdminUpdateOneRequiredWithoutDealsInput
  address: String
  productName: String
  productNum: String
  productCost: Int
  userName: String
  userPhonNumber: String
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

input DealUpdateManyDataInput {
  address: String
  productName: String
  productNum: String
  productCost: Int
  userName: String
  userPhonNumber: String
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

input DealUpdateManyMutationInput {
  address: String
  productName: String
  productNum: String
  productCost: Int
  userName: String
  userPhonNumber: String
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

input DealUpdateManyWithoutAdminInput {
  create: [DealCreateWithoutAdminInput!]
  delete: [DealWhereUniqueInput!]
  connect: [DealWhereUniqueInput!]
  set: [DealWhereUniqueInput!]
  disconnect: [DealWhereUniqueInput!]
  update: [DealUpdateWithWhereUniqueWithoutAdminInput!]
  upsert: [DealUpsertWithWhereUniqueWithoutAdminInput!]
  deleteMany: [DealScalarWhereInput!]
  updateMany: [DealUpdateManyWithWhereNestedInput!]
}

input DealUpdateManyWithWhereNestedInput {
  where: DealScalarWhereInput!
  data: DealUpdateManyDataInput!
}

input DealUpdateWithoutAdminDataInput {
  address: String
  productName: String
  productNum: String
  productCost: Int
  userName: String
  userPhonNumber: String
  isDeliver: Boolean
  isAllPay: Boolean
  payPerson: String
}

input DealUpdateWithWhereUniqueWithoutAdminInput {
  where: DealWhereUniqueInput!
  data: DealUpdateWithoutAdminDataInput!
}

input DealUpsertWithWhereUniqueWithoutAdminInput {
  where: DealWhereUniqueInput!
  update: DealUpdateWithoutAdminDataInput!
  create: DealCreateWithoutAdminInput!
}

input DealWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  admin: AdminWhereInput
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  productNum: String
  productNum_not: String
  productNum_in: [String!]
  productNum_not_in: [String!]
  productNum_lt: String
  productNum_lte: String
  productNum_gt: String
  productNum_gte: String
  productNum_contains: String
  productNum_not_contains: String
  productNum_starts_with: String
  productNum_not_starts_with: String
  productNum_ends_with: String
  productNum_not_ends_with: String
  productCost: Int
  productCost_not: Int
  productCost_in: [Int!]
  productCost_not_in: [Int!]
  productCost_lt: Int
  productCost_lte: Int
  productCost_gt: Int
  productCost_gte: Int
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  userPhonNumber: String
  userPhonNumber_not: String
  userPhonNumber_in: [String!]
  userPhonNumber_not_in: [String!]
  userPhonNumber_lt: String
  userPhonNumber_lte: String
  userPhonNumber_gt: String
  userPhonNumber_gte: String
  userPhonNumber_contains: String
  userPhonNumber_not_contains: String
  userPhonNumber_starts_with: String
  userPhonNumber_not_starts_with: String
  userPhonNumber_ends_with: String
  userPhonNumber_not_ends_with: String
  isDeliver: Boolean
  isDeliver_not: Boolean
  isAllPay: Boolean
  isAllPay_not: Boolean
  payPerson: String
  payPerson_not: String
  payPerson_in: [String!]
  payPerson_not_in: [String!]
  payPerson_lt: String
  payPerson_lte: String
  payPerson_gt: String
  payPerson_gte: String
  payPerson_contains: String
  payPerson_not_contains: String
  payPerson_starts_with: String
  payPerson_not_starts_with: String
  payPerson_ends_with: String
  payPerson_not_ends_with: String
  AND: [DealWhereInput!]
  OR: [DealWhereInput!]
  NOT: [DealWhereInput!]
}

input DealWhereUniqueInput {
  ID: ID
}

scalar Long

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  createDeal(data: DealCreateInput!): Deal!
  updateDeal(data: DealUpdateInput!, where: DealWhereUniqueInput!): Deal
  updateManyDeals(data: DealUpdateManyMutationInput!, where: DealWhereInput): BatchPayload!
  upsertDeal(where: DealWhereUniqueInput!, create: DealCreateInput!, update: DealUpdateInput!): Deal!
  deleteDeal(where: DealWhereUniqueInput!): Deal
  deleteManyDeals(where: DealWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  deal(where: DealWhereUniqueInput!): Deal
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal]!
  dealsConnection(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealConnection!
  node(id: ID!): Node
}

type Subscription {
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  deal(where: DealSubscriptionWhereInput): DealSubscriptionPayload
}
`
      }
    