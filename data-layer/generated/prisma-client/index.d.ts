// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  admin: (where?: AdminWhereInput) => Promise<boolean>;
  deal: (where?: DealWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  admin: (where: AdminWhereUniqueInput) => AdminNullablePromise;
  admins: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Admin>;
  adminsConnection: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminConnectionPromise;
  deal: (where: DealWhereUniqueInput) => DealNullablePromise;
  deals: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deal>;
  dealsConnection: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DealConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmin: (data: AdminCreateInput) => AdminPromise;
  updateAdmin: (args: {
    data: AdminUpdateInput;
    where: AdminWhereUniqueInput;
  }) => AdminPromise;
  updateManyAdmins: (args: {
    data: AdminUpdateManyMutationInput;
    where?: AdminWhereInput;
  }) => BatchPayloadPromise;
  upsertAdmin: (args: {
    where: AdminWhereUniqueInput;
    create: AdminCreateInput;
    update: AdminUpdateInput;
  }) => AdminPromise;
  deleteAdmin: (where: AdminWhereUniqueInput) => AdminPromise;
  deleteManyAdmins: (where?: AdminWhereInput) => BatchPayloadPromise;
  createDeal: (data: DealCreateInput) => DealPromise;
  updateDeal: (args: {
    data: DealUpdateInput;
    where: DealWhereUniqueInput;
  }) => DealPromise;
  updateManyDeals: (args: {
    data: DealUpdateManyMutationInput;
    where?: DealWhereInput;
  }) => BatchPayloadPromise;
  upsertDeal: (args: {
    where: DealWhereUniqueInput;
    create: DealCreateInput;
    update: DealUpdateInput;
  }) => DealPromise;
  deleteDeal: (where: DealWhereUniqueInput) => DealPromise;
  deleteManyDeals: (where?: DealWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admin: (
    where?: AdminSubscriptionWhereInput
  ) => AdminSubscriptionPayloadSubscription;
  deal: (
    where?: DealSubscriptionWhereInput
  ) => DealSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DealOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "address_ASC"
  | "address_DESC"
  | "productName_ASC"
  | "productName_DESC"
  | "productNum_ASC"
  | "productNum_DESC"
  | "productCost_ASC"
  | "productCost_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "userPhonNumber_ASC"
  | "userPhonNumber_DESC"
  | "isDeliver_ASC"
  | "isDeliver_DESC"
  | "isAllPay_ASC"
  | "isAllPay_DESC"
  | "payPerson_ASC"
  | "payPerson_DESC";

export type AdminOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DealUpdateManyWithoutAdminInput {
  create?: Maybe<DealCreateWithoutAdminInput[] | DealCreateWithoutAdminInput>;
  delete?: Maybe<DealWhereUniqueInput[] | DealWhereUniqueInput>;
  connect?: Maybe<DealWhereUniqueInput[] | DealWhereUniqueInput>;
  set?: Maybe<DealWhereUniqueInput[] | DealWhereUniqueInput>;
  disconnect?: Maybe<DealWhereUniqueInput[] | DealWhereUniqueInput>;
  update?: Maybe<
    | DealUpdateWithWhereUniqueWithoutAdminInput[]
    | DealUpdateWithWhereUniqueWithoutAdminInput
  >;
  upsert?: Maybe<
    | DealUpsertWithWhereUniqueWithoutAdminInput[]
    | DealUpsertWithWhereUniqueWithoutAdminInput
  >;
  deleteMany?: Maybe<DealScalarWhereInput[] | DealScalarWhereInput>;
  updateMany?: Maybe<
    DealUpdateManyWithWhereNestedInput[] | DealUpdateManyWithWhereNestedInput
  >;
}

export type AdminWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface DealCreateInput {
  ID?: Maybe<ID_Input>;
  admin: AdminCreateOneWithoutDealsInput;
  address: String;
  productName: String;
  productNum: String;
  productCost: Int;
  userName: String;
  userPhonNumber: String;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export interface DealUpdateManyWithWhereNestedInput {
  where: DealScalarWhereInput;
  data: DealUpdateManyDataInput;
}

export interface AdminUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface DealUpdateWithoutAdminDataInput {
  address?: Maybe<String>;
  productName?: Maybe<String>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export interface AdminSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdminWhereInput>;
  AND?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  OR?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  NOT?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
}

export interface DealUpdateManyMutationInput {
  address?: Maybe<String>;
  productName?: Maybe<String>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export interface AdminCreateInput {
  ID?: Maybe<ID_Input>;
  name: String;
  password: String;
  deals?: Maybe<DealCreateManyWithoutAdminInput>;
}

export interface AdminUpdateWithoutDealsDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface DealCreateManyWithoutAdminInput {
  create?: Maybe<DealCreateWithoutAdminInput[] | DealCreateWithoutAdminInput>;
  connect?: Maybe<DealWhereUniqueInput[] | DealWhereUniqueInput>;
}

export interface DealUpdateInput {
  admin?: Maybe<AdminUpdateOneRequiredWithoutDealsInput>;
  address?: Maybe<String>;
  productName?: Maybe<String>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export interface DealCreateWithoutAdminInput {
  ID?: Maybe<ID_Input>;
  address: String;
  productName: String;
  productNum: String;
  productCost: Int;
  userName: String;
  userPhonNumber: String;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export type DealWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface AdminUpdateInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  deals?: Maybe<DealUpdateManyWithoutAdminInput>;
}

export interface DealSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DealWhereInput>;
  AND?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
  OR?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
  NOT?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
}

export interface DealUpdateManyDataInput {
  address?: Maybe<String>;
  productName?: Maybe<String>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
}

export interface AdminUpsertWithoutDealsInput {
  update: AdminUpdateWithoutDealsDataInput;
  create: AdminCreateWithoutDealsInput;
}

export interface DealScalarWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  productNum?: Maybe<String>;
  productNum_not?: Maybe<String>;
  productNum_in?: Maybe<String[] | String>;
  productNum_not_in?: Maybe<String[] | String>;
  productNum_lt?: Maybe<String>;
  productNum_lte?: Maybe<String>;
  productNum_gt?: Maybe<String>;
  productNum_gte?: Maybe<String>;
  productNum_contains?: Maybe<String>;
  productNum_not_contains?: Maybe<String>;
  productNum_starts_with?: Maybe<String>;
  productNum_not_starts_with?: Maybe<String>;
  productNum_ends_with?: Maybe<String>;
  productNum_not_ends_with?: Maybe<String>;
  productCost?: Maybe<Int>;
  productCost_not?: Maybe<Int>;
  productCost_in?: Maybe<Int[] | Int>;
  productCost_not_in?: Maybe<Int[] | Int>;
  productCost_lt?: Maybe<Int>;
  productCost_lte?: Maybe<Int>;
  productCost_gt?: Maybe<Int>;
  productCost_gte?: Maybe<Int>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  userPhonNumber_not?: Maybe<String>;
  userPhonNumber_in?: Maybe<String[] | String>;
  userPhonNumber_not_in?: Maybe<String[] | String>;
  userPhonNumber_lt?: Maybe<String>;
  userPhonNumber_lte?: Maybe<String>;
  userPhonNumber_gt?: Maybe<String>;
  userPhonNumber_gte?: Maybe<String>;
  userPhonNumber_contains?: Maybe<String>;
  userPhonNumber_not_contains?: Maybe<String>;
  userPhonNumber_starts_with?: Maybe<String>;
  userPhonNumber_not_starts_with?: Maybe<String>;
  userPhonNumber_ends_with?: Maybe<String>;
  userPhonNumber_not_ends_with?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isDeliver_not?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  isAllPay_not?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
  payPerson_not?: Maybe<String>;
  payPerson_in?: Maybe<String[] | String>;
  payPerson_not_in?: Maybe<String[] | String>;
  payPerson_lt?: Maybe<String>;
  payPerson_lte?: Maybe<String>;
  payPerson_gt?: Maybe<String>;
  payPerson_gte?: Maybe<String>;
  payPerson_contains?: Maybe<String>;
  payPerson_not_contains?: Maybe<String>;
  payPerson_starts_with?: Maybe<String>;
  payPerson_not_starts_with?: Maybe<String>;
  payPerson_ends_with?: Maybe<String>;
  payPerson_not_ends_with?: Maybe<String>;
  AND?: Maybe<DealScalarWhereInput[] | DealScalarWhereInput>;
  OR?: Maybe<DealScalarWhereInput[] | DealScalarWhereInput>;
  NOT?: Maybe<DealScalarWhereInput[] | DealScalarWhereInput>;
}

export interface DealUpsertWithWhereUniqueWithoutAdminInput {
  where: DealWhereUniqueInput;
  update: DealUpdateWithoutAdminDataInput;
  create: DealCreateWithoutAdminInput;
}

export interface AdminWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  deals_every?: Maybe<DealWhereInput>;
  deals_some?: Maybe<DealWhereInput>;
  deals_none?: Maybe<DealWhereInput>;
  AND?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  OR?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  NOT?: Maybe<AdminWhereInput[] | AdminWhereInput>;
}

export interface DealUpdateWithWhereUniqueWithoutAdminInput {
  where: DealWhereUniqueInput;
  data: DealUpdateWithoutAdminDataInput;
}

export interface AdminUpdateOneRequiredWithoutDealsInput {
  create?: Maybe<AdminCreateWithoutDealsInput>;
  update?: Maybe<AdminUpdateWithoutDealsDataInput>;
  upsert?: Maybe<AdminUpsertWithoutDealsInput>;
  connect?: Maybe<AdminWhereUniqueInput>;
}

export interface DealWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  admin?: Maybe<AdminWhereInput>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  productNum?: Maybe<String>;
  productNum_not?: Maybe<String>;
  productNum_in?: Maybe<String[] | String>;
  productNum_not_in?: Maybe<String[] | String>;
  productNum_lt?: Maybe<String>;
  productNum_lte?: Maybe<String>;
  productNum_gt?: Maybe<String>;
  productNum_gte?: Maybe<String>;
  productNum_contains?: Maybe<String>;
  productNum_not_contains?: Maybe<String>;
  productNum_starts_with?: Maybe<String>;
  productNum_not_starts_with?: Maybe<String>;
  productNum_ends_with?: Maybe<String>;
  productNum_not_ends_with?: Maybe<String>;
  productCost?: Maybe<Int>;
  productCost_not?: Maybe<Int>;
  productCost_in?: Maybe<Int[] | Int>;
  productCost_not_in?: Maybe<Int[] | Int>;
  productCost_lt?: Maybe<Int>;
  productCost_lte?: Maybe<Int>;
  productCost_gt?: Maybe<Int>;
  productCost_gte?: Maybe<Int>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  userPhonNumber_not?: Maybe<String>;
  userPhonNumber_in?: Maybe<String[] | String>;
  userPhonNumber_not_in?: Maybe<String[] | String>;
  userPhonNumber_lt?: Maybe<String>;
  userPhonNumber_lte?: Maybe<String>;
  userPhonNumber_gt?: Maybe<String>;
  userPhonNumber_gte?: Maybe<String>;
  userPhonNumber_contains?: Maybe<String>;
  userPhonNumber_not_contains?: Maybe<String>;
  userPhonNumber_starts_with?: Maybe<String>;
  userPhonNumber_not_starts_with?: Maybe<String>;
  userPhonNumber_ends_with?: Maybe<String>;
  userPhonNumber_not_ends_with?: Maybe<String>;
  isDeliver?: Maybe<Boolean>;
  isDeliver_not?: Maybe<Boolean>;
  isAllPay?: Maybe<Boolean>;
  isAllPay_not?: Maybe<Boolean>;
  payPerson?: Maybe<String>;
  payPerson_not?: Maybe<String>;
  payPerson_in?: Maybe<String[] | String>;
  payPerson_not_in?: Maybe<String[] | String>;
  payPerson_lt?: Maybe<String>;
  payPerson_lte?: Maybe<String>;
  payPerson_gt?: Maybe<String>;
  payPerson_gte?: Maybe<String>;
  payPerson_contains?: Maybe<String>;
  payPerson_not_contains?: Maybe<String>;
  payPerson_starts_with?: Maybe<String>;
  payPerson_not_starts_with?: Maybe<String>;
  payPerson_ends_with?: Maybe<String>;
  payPerson_not_ends_with?: Maybe<String>;
  AND?: Maybe<DealWhereInput[] | DealWhereInput>;
  OR?: Maybe<DealWhereInput[] | DealWhereInput>;
  NOT?: Maybe<DealWhereInput[] | DealWhereInput>;
}

export interface AdminCreateOneWithoutDealsInput {
  create?: Maybe<AdminCreateWithoutDealsInput>;
  connect?: Maybe<AdminWhereUniqueInput>;
}

export interface AdminCreateWithoutDealsInput {
  ID?: Maybe<ID_Input>;
  name: String;
  password: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface DealPreviousValues {
  ID: ID_Output;
  createdAt: DateTimeOutput;
  address: String;
  productName: String;
  productNum: String;
  productCost: Int;
  userName: String;
  userPhonNumber: String;
  isDeliver: Boolean;
  isAllPay: Boolean;
  payPerson?: String;
}

export interface DealPreviousValuesPromise
  extends Promise<DealPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  productName: () => Promise<String>;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
  isDeliver: () => Promise<Boolean>;
  isAllPay: () => Promise<Boolean>;
  payPerson: () => Promise<String>;
}

export interface DealPreviousValuesSubscription
  extends Promise<AsyncIterator<DealPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  address: () => Promise<AsyncIterator<String>>;
  productName: () => Promise<AsyncIterator<String>>;
  productNum: () => Promise<AsyncIterator<String>>;
  productCost: () => Promise<AsyncIterator<Int>>;
  userName: () => Promise<AsyncIterator<String>>;
  userPhonNumber: () => Promise<AsyncIterator<String>>;
  isDeliver: () => Promise<AsyncIterator<Boolean>>;
  isAllPay: () => Promise<AsyncIterator<Boolean>>;
  payPerson: () => Promise<AsyncIterator<String>>;
}

export interface AdminEdge {
  node: Admin;
  cursor: String;
}

export interface AdminEdgePromise extends Promise<AdminEdge>, Fragmentable {
  node: <T = AdminPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdminEdgeSubscription
  extends Promise<AsyncIterator<AdminEdge>>,
    Fragmentable {
  node: <T = AdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Admin {
  ID: ID_Output;
  name: String;
  password: String;
}

export interface AdminPromise extends Promise<Admin>, Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  deals: <T = FragmentableArray<Deal>>(args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AdminSubscription
  extends Promise<AsyncIterator<Admin>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  deals: <T = Promise<AsyncIterator<DealSubscription>>>(args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AdminNullablePromise
  extends Promise<Admin | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  deals: <T = FragmentableArray<Deal>>(args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AdminConnection {
  pageInfo: PageInfo;
  edges: AdminEdge[];
}

export interface AdminConnectionPromise
  extends Promise<AdminConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdminEdge>>() => T;
  aggregate: <T = AggregateAdminPromise>() => T;
}

export interface AdminConnectionSubscription
  extends Promise<AsyncIterator<AdminConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdminEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdminSubscription>() => T;
}

export interface DealSubscriptionPayload {
  mutation: MutationType;
  node: Deal;
  updatedFields: String[];
  previousValues: DealPreviousValues;
}

export interface DealSubscriptionPayloadPromise
  extends Promise<DealSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DealPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DealPreviousValuesPromise>() => T;
}

export interface DealSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DealSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DealSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DealPreviousValuesSubscription>() => T;
}

export interface AdminSubscriptionPayload {
  mutation: MutationType;
  node: Admin;
  updatedFields: String[];
  previousValues: AdminPreviousValues;
}

export interface AdminSubscriptionPayloadPromise
  extends Promise<AdminSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdminPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPreviousValuesPromise>() => T;
}

export interface AdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPreviousValuesSubscription>() => T;
}

export interface Deal {
  ID: ID_Output;
  createdAt: DateTimeOutput;
  address: String;
  productName: String;
  productNum: String;
  productCost: Int;
  userName: String;
  userPhonNumber: String;
  isDeliver: Boolean;
  isAllPay: Boolean;
  payPerson?: String;
}

export interface DealPromise extends Promise<Deal>, Fragmentable {
  ID: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  admin: <T = AdminPromise>() => T;
  address: () => Promise<String>;
  productName: () => Promise<String>;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
  isDeliver: () => Promise<Boolean>;
  isAllPay: () => Promise<Boolean>;
  payPerson: () => Promise<String>;
}

export interface DealSubscription
  extends Promise<AsyncIterator<Deal>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  admin: <T = AdminSubscription>() => T;
  address: () => Promise<AsyncIterator<String>>;
  productName: () => Promise<AsyncIterator<String>>;
  productNum: () => Promise<AsyncIterator<String>>;
  productCost: () => Promise<AsyncIterator<Int>>;
  userName: () => Promise<AsyncIterator<String>>;
  userPhonNumber: () => Promise<AsyncIterator<String>>;
  isDeliver: () => Promise<AsyncIterator<Boolean>>;
  isAllPay: () => Promise<AsyncIterator<Boolean>>;
  payPerson: () => Promise<AsyncIterator<String>>;
}

export interface DealNullablePromise
  extends Promise<Deal | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  admin: <T = AdminPromise>() => T;
  address: () => Promise<String>;
  productName: () => Promise<String>;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
  isDeliver: () => Promise<Boolean>;
  isAllPay: () => Promise<Boolean>;
  payPerson: () => Promise<String>;
}

export interface AdminPreviousValues {
  ID: ID_Output;
  name: String;
  password: String;
}

export interface AdminPreviousValuesPromise
  extends Promise<AdminPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeal {
  count: Int;
}

export interface AggregateDealPromise
  extends Promise<AggregateDeal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDealSubscription
  extends Promise<AsyncIterator<AggregateDeal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DealEdge {
  node: Deal;
  cursor: String;
}

export interface DealEdgePromise extends Promise<DealEdge>, Fragmentable {
  node: <T = DealPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DealEdgeSubscription
  extends Promise<AsyncIterator<DealEdge>>,
    Fragmentable {
  node: <T = DealSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateAdmin {
  count: Int;
}

export interface AggregateAdminPromise
  extends Promise<AggregateAdmin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminSubscription
  extends Promise<AsyncIterator<AggregateAdmin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DealConnection {
  pageInfo: PageInfo;
  edges: DealEdge[];
}

export interface DealConnectionPromise
  extends Promise<DealConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DealEdge>>() => T;
  aggregate: <T = AggregateDealPromise>() => T;
}

export interface DealConnectionSubscription
  extends Promise<AsyncIterator<DealConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DealEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDealSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Deal",
    embedded: false
  },
  {
    name: "Admin",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
